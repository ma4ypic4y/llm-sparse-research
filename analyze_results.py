#!/usr/bin/env python3

import json
import argparse
import matplotlib.pyplot as plt
import pandas as pd
from pathlib import Path
import wandb


def load_metrics_summary(output_dir: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
    summary_path = Path(output_dir) / 'metrics_summary.json'
    if not summary_path.exists():
        raise FileNotFoundError(f"Metrics summary not found at {summary_path}")

    with open(summary_path, 'r') as f:
        return json.load(f)


def analyze_weight_revival(wandb_run_id: str, project_name: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–µ—Å–æ–≤"""
    api = wandb.Api()
    run = api.run(f"{project_name}/{wandb_run_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
    history = run.history()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏
    revival_cols = [col for col in history.columns if 'weight_revival' in col]
    sparsity_cols = [col for col in history.columns if 'sparsity' in col and 'layer' not in col]

    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–µ—Å–æ–≤', fontsize=16)

    # 1. Revival rate –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    if 'weight_revival/revival_rate' in history.columns:
        axes[0,0].plot(history.index, history['weight_revival/revival_rate'])
        axes[0,0].set_title('Revival Rate –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        axes[0,0].set_xlabel('–®–∞–≥')
        axes[0,0].set_ylabel('Revival Rate')
        axes[0,0].grid(True)

    # 2. –û–±—â–∞—è —Å–ø–∞—Ä—Å–Ω–æ—Å—Ç—å
    if 'sparsity/overall' in history.columns:
        axes[0,1].plot(history.index, history['sparsity/overall'])
        axes[0,1].set_title('–û–±—â–∞—è —Å–ø–∞—Ä—Å–Ω–æ—Å—Ç—å')
        axes[0,1].set_xlabel('–®–∞–≥')
        axes[0,1].set_ylabel('–°–ø–∞—Ä—Å–Ω–æ—Å—Ç—å')
        axes[0,1].grid(True)

    # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–≤—à–∏—Ö –≤–µ—Å–æ–≤
    if 'weight_revival/total_revived' in history.columns:
        axes[1,0].plot(history.index, history['weight_revival/total_revived'])
        axes[1,0].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–≤—à–∏—Ö –≤–µ—Å–æ–≤')
        axes[1,0].set_xlabel('–®–∞–≥')
        axes[1,0].set_ylabel('–û–∂–∏–≤—à–∏—Ö –≤–µ—Å–æ–≤')
        axes[1,0].grid(True)

    # 4. –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –Ω—É–ª–µ–≤—ã–µ –≤–µ—Å–∞
    if 'weight_revival/total_stable_zeros' in history.columns:
        axes[1,1].plot(history.index, history['weight_revival/total_stable_zeros'])
        axes[1,1].set_title('–°—Ç–∞–±–∏–ª—å–Ω–æ –∑–∞–Ω—É–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞')
        axes[1,1].set_xlabel('–®–∞–≥')
        axes[1,1].set_ylabel('–°—Ç–∞–±–∏–ª—å–Ω–æ –Ω—É–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤')
        axes[1,1].grid(True)

    plt.tight_layout()
    return fig


def analyze_layer_degradation(wandb_run_id: str, project_name: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –ø–æ —Å–ª–æ—è–º"""
    api = wandb.Api()
    run = api.run(f"{project_name}/{wandb_run_id}")

    history = run.history()

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–ª–æ—è–º
    layer_sparsity_cols = [col for col in history.columns if 'layer_sparsity/' in col]
    dead_neuron_cols = [col for col in history.columns if 'dead_neurons/' in col]
    effective_rank_cols = [col for col in history.columns if 'effective_rank/' in col]

    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–ª–æ–µ–≤', fontsize=16)

    # 1. –°–ø–∞—Ä—Å–Ω–æ—Å—Ç—å –ø–æ —Å–ª–æ—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    if layer_sparsity_cols:
        last_values = history[layer_sparsity_cols].iloc[-1]
        layer_names = [col.replace('layer_sparsity/', '') for col in layer_sparsity_cols]

        axes[0,0].bar(range(len(last_values)), last_values.values)
        axes[0,0].set_title('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–ø–∞—Ä—Å–Ω–æ—Å—Ç—å –ø–æ —Å–ª–æ—è–º')
        axes[0,0].set_xlabel('–°–ª–æ–π')
        axes[0,0].set_ylabel('–°–ø–∞—Ä—Å–Ω–æ—Å—Ç—å')
        axes[0,0].set_xticks(range(len(layer_names)))
        axes[0,0].set_xticklabels(layer_names, rotation=45)

    # 2. –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ–π—Ä–æ–Ω—ã
    if dead_neuron_cols:
        dead_out_cols = [col for col in dead_neuron_cols if '_out' in col]
        if dead_out_cols:
            last_values = history[dead_out_cols].iloc[-1]
            layer_names = [col.replace('dead_neurons/', '').replace('_out', '')
                         for col in dead_out_cols]

            axes[0,1].bar(range(len(last_values)), last_values.values)
            axes[0,1].set_title('–ú–µ—Ä—Ç–≤—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã')
            axes[0,1].set_xlabel('–°–ª–æ–π')
            axes[0,1].set_ylabel('–î–æ–ª—è –º–µ—Ä—Ç–≤—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤')
            axes[0,1].set_xticks(range(len(layer_names)))
            axes[0,1].set_xticklabels(layer_names, rotation=45)

    # 3. Effective Rank –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    if effective_rank_cols:
        for col in effective_rank_cols[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–µ–≤
            layer_name = col.replace('effective_rank/', '')
            axes[1,0].plot(history.index, history[col], label=layer_name, alpha=0.7)

        axes[1,0].set_title('Effective Rank –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        axes[1,0].set_xlabel('–®–∞–≥')
        axes[1,0].set_ylabel('Effective Rank (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)')
        axes[1,0].legend()
        axes[1,0].grid(True)

    # 4. Gradient norms –∑–∞–Ω—É–ª–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
    grad_norm_cols = [col for col in history.columns if 'zero_grad_norm/' in col]
    if 'zero_grad_norm/average' in history.columns:
        axes[1,1].plot(history.index, history['zero_grad_norm/average'])
        axes[1,1].set_title('–°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞–Ω—É–ª–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤')
        axes[1,1].set_xlabel('–®–∞–≥')
        axes[1,1].set_ylabel('–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞')
        axes[1,1].grid(True)
        axes[1,1].set_yscale('log')  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞

    plt.tight_layout()
    return fig


def generate_report(output_dir: str, wandb_run_id: str = None, project_name: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É"""
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    try:
        metrics_summary = load_metrics_summary(output_dir)
        print("‚úì –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except FileNotFoundError as e:
        print(f"‚úó {e}")
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    final_metrics = metrics_summary.get('final_metrics', {})
    pruning_summary = metrics_summary.get('pruning_summary', {})
    config = metrics_summary.get('config', {})

    print("\n" + "="*60)
    print("–û–¢–ß–ï–¢ –ü–û –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–£ –°–ü–ê–†–°–ò–§–ò–ö–ê–¶–ò–ò –í–ï–°–û–í")
    print("="*60)

    print("\nüìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê:")
    print(f"Target sparsity: {config.get('pruning', {}).get('target_sparsity', 'N/A'):.1%}")
    print(f"Epochs: {config.get('training', {}).get('epochs', 'N/A')}")
    print(f"Learning rate: {config.get('training', {}).get('lr', 'N/A')}")
    print(f"Prune frequency: {config.get('pruning', {}).get('prune_freq', 'N/A')}")

    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–£–ù–ò–ù–ì–ê:")
    if pruning_summary:
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–ø–∞—Ä—Å–Ω–æ—Å—Ç—å: {pruning_summary.get('final_applied_sparsity', 'N/A'):.1%}")
        print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä—É–Ω–∏–Ω–≥–∞: {pruning_summary.get('pruning_efficiency', 'N/A'):.1%}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø—Ä—É–Ω–∏–Ω–≥–∞: {pruning_summary.get('num_pruning_steps', 'N/A')}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å–ø–∞—Ä—Å–Ω–æ—Å—Ç–∏ –∑–∞ —à–∞–≥: {pruning_summary.get('avg_increment_per_step', 'N/A'):.3f}")

    print("\nüîÑ –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–û–†–û–ó–ö–ò –í–ï–°–û–í:")
    if final_metrics:
        total_revivals = final_metrics.get('final/total_weight_revivals', 'N/A')
        never_revived = final_metrics.get('final/never_revived_percentage', 'N/A')
        avg_duration = final_metrics.get('final/avg_zero_duration', 'N/A')

        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–æ—Ä–æ–∑–æ–∫: {total_revivals}")
        if isinstance(never_revived, (int, float)):
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Å–æ–≤, –Ω–µ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∫–æ–≥–¥–∞: {never_revived:.1%}")
        else:
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Å–æ–≤, –Ω–µ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∫–æ–≥–¥–∞: {never_revived}")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—É–ª–µ–Ω–∏—è: {avg_duration}")

    print("\nüìà –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if isinstance(final_metrics.get('final/never_revived_percentage'), (int, float)):
        never_revived_pct = final_metrics['final/never_revived_percentage']
        if never_revived_pct > 0.8:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–Ω—É–ª–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ (>80%)")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–æ–∑–º–æ–∂–Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ target_sparsity")
        elif never_revived_pct > 0.6:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–Ω—É–ª–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ (>60%)")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏, –≤–æ–∑–º–æ–∂–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è")
        else:
            print("‚úÖ –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä—É–Ω–∏–Ω–≥–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤–µ—Å–æ–≤")

    if total_revivals == 0:
        print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–µ—Å–æ–≤")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä—É–Ω–∏–Ω–≥–∞ –∏ learning rate")

    # –ï—Å–ª–∏ –µ—Å—Ç—å wandb –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    if wandb_run_id and project_name:
        print(f"\nüìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑ wandb run: {wandb_run_id}")
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–µ—Å–æ–≤
            revival_fig = analyze_weight_revival(wandb_run_id, project_name)
            revival_fig.savefig(f"{output_dir}/weight_revival_analysis.png", dpi=300, bbox_inches='tight')
            print("‚úì –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–µ—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            # –ê–Ω–∞–ª–∏–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–ª–æ–µ–≤
            degradation_fig = analyze_layer_degradation(wandb_run_id, project_name)
            degradation_fig.savefig(f"{output_dir}/layer_degradation_analysis.png", dpi=300, bbox_inches='tight')
            print("‚úì –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–ª–æ–µ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    print(f"\nüìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_dir}/")
    print("="*60)


def main():
    parser = argparse.ArgumentParser(description='Analyze pruning experiment results')
    parser.add_argument('--output_dir', type=str, default='exp',
                       help='Directory with experiment results')
    parser.add_argument('--wandb_run_id', type=str,
                       help='WandB run ID for detailed analysis')
    parser.add_argument('--project_name', type=str, default='sparse-weights',
                       help='WandB project name')

    args = parser.parse_args()

    generate_report(args.output_dir, args.wandb_run_id, args.project_name)


if __name__ == '__main__':
    main()